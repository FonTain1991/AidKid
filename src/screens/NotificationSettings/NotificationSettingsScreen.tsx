import React, { useState, useEffect } from 'react'
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Switch, Alert } from 'react-native'
import { SafeAreaView } from 'react-native-safe-area-context'
import { useTheme } from '@/app/providers/theme'
import { notificationService } from '@/shared/lib'
import { useEvent } from '@/shared/hooks'

export function NotificationSettingsScreen() {
  const { colors } = useTheme()
  const [hasPermission, setHasPermission] = useState(false)
  const [canScheduleAlarms, setCanScheduleAlarms] = useState(false)
  const [batteryOptimized, setBatteryOptimized] = useState(false)
  const [isLoading, setIsLoading] = useState(true)

  const loadSettings = useEvent(async () => {
    try {
      setIsLoading(true)

      const permission = await notificationService.checkPermission()
      const canSchedule = await notificationService.canScheduleExactAlarms()
      const batteryOpt = await notificationService.checkBatteryOptimization()

      setHasPermission(permission)
      setCanScheduleAlarms(canSchedule)
      setBatteryOptimized(batteryOpt)
    } catch (error) {
      console.error('Failed to load notification settings:', error)
    } finally {
      setIsLoading(false)
    }
  })

  useEffect(() => {
    loadSettings()
  }, [loadSettings])

  const requestPermission = useEvent(async () => {
    try {
      const granted = await notificationService.requestPermission()
      setHasPermission(granted)

      if (granted) {
        Alert.alert('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!')
      } else {
        Alert.alert('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.')
      }
    } catch (error) {
      console.error('Failed to request permission:', error)
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ')
    }
  })

  const openBatterySettings = useEvent(async () => {
    await notificationService.requestBatteryOptimizationExemption()
  })

  const openAlarmSettings = useEvent(async () => {
    await notificationService.requestExactAlarmPermission()
  })


  const testNotification = useEvent(async () => {
    try {
      await notificationService.displayNotification(
        'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        '–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
        { type: 'test', timestamp: Date.now() }
      )
      Alert.alert('‚úÖ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    } catch (error) {
      console.error('Failed to send test notification:', error)
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
    }
  })

  const testScheduledNotification = useEvent(async () => {
    try {
      const kitId = 'test-kit' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
      const notificationId = await notificationService.sendTestNotification(kitId)
      if (notificationId) {
        Alert.alert(
          '‚úÖ –¢–µ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
          '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n' +
          '‚Ä¢ –°–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n' +
          '‚Ä¢ –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n' +
          '‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç–∞—Ä–µ–∏'
        )
      } else {
        Alert.alert('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
      }
    } catch (error) {
      console.error('Failed to send scheduled test notification:', error)
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
    }
  })

  const testCriticalNotification = useEvent(async () => {
    try {
      const kitId = 'test-kit' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
      const notificationId = await notificationService.sendTestCriticalNotification(kitId)
      if (notificationId) {
        Alert.alert(
          '‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
          '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n' +
          '‚Ä¢ –°–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n' +
          '‚Ä¢ –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n' +
          '‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç–∞—Ä–µ–∏'
        )
      } else {
        Alert.alert('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
      }
    } catch (error) {
      console.error('Failed to send critical test notification:', error)
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
    }
  })

  const cancelAllTests = useEvent(async () => {
    try {
      await notificationService.cancelAllTestNotifications()
      Alert.alert('‚úÖ –¢–µ—Å—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã', '–í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã')
    } catch (error) {
      console.error('Failed to cancel test notifications:', error)
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    }
  })

  const debugScheduled = useEvent(async () => {
    try {
      await notificationService.debugScheduledNotifications()
      Alert.alert('üîç –û—Ç–ª–∞–¥–∫–∞', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å')
    } catch (error) {
      console.error('Failed to debug notifications:', error)
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö')
    }
  })

  const openAppSettings = useEvent(async () => {
    try {
      const { Linking } = require('react-native')
      await Linking.openSettings()
    } catch (error) {
      console.error('Failed to open app settings:', error)
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    }
  })

  const getStatusIcon = (status: boolean) => status ? '‚úÖ' : '‚ùå'
  const getStatusText = (status: boolean) => status ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'

  if (isLoading) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={styles.loadingContainer}>
          <Text style={[styles.loadingText, { color: colors.text }]}>
            –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...
          </Text>
        </View>
      </SafeAreaView>
    )
  }

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <ScrollView style={styles.scroll}>
        <View style={styles.header}>
          <Text style={[styles.title, { color: colors.text }]}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Text>
          <Text style={[styles.subtitle, { color: colors.textSecondary }]}>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö
          </Text>
        </View>

        {/* –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π */}
        <View style={styles.section}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>–°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π</Text>

          <View style={[styles.statusItem, { borderBottomColor: colors.border }]}>
            <View style={styles.statusContent}>
              <Text style={styles.statusIcon}>{getStatusIcon(hasPermission)}</Text>
              <View style={styles.statusText}>
                <Text style={[styles.statusTitle, { color: colors.text }]}>
                  –û—Å–Ω–æ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                </Text>
                <Text style={[styles.statusDescription, { color: colors.textSecondary }]}>
                  {getStatusText(hasPermission)}
                </Text>
              </View>
            </View>
            {!hasPermission && (
              <TouchableOpacity
                style={[styles.actionButton, { backgroundColor: colors.primary }]}
                onPress={requestPermission}
              >
                <Text style={styles.actionButtonText}>–í–∫–ª—é—á–∏—Ç—å</Text>
              </TouchableOpacity>
            )}
          </View>

          <View style={[styles.statusItem, { borderBottomColor: colors.border }]}>
            <View style={styles.statusContent}>
              <Text style={styles.statusIcon}>{getStatusIcon(canScheduleAlarms)}</Text>
              <View style={styles.statusText}>
                <Text style={[styles.statusTitle, { color: colors.text }]}>
                  –¢–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Android 12+)
                </Text>
                <Text style={[styles.statusDescription, { color: colors.textSecondary }]}>
                  {getStatusText(canScheduleAlarms)}
                </Text>
              </View>
            </View>
            {!canScheduleAlarms && (
              <TouchableOpacity
                style={[styles.actionButton, { backgroundColor: colors.primary }]}
                onPress={openAlarmSettings}
              >
                <Text style={styles.actionButtonText}>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å</Text>
              </TouchableOpacity>
            )}
          </View>

          <View style={styles.statusItem}>
            <View style={styles.statusContent}>
              <Text style={styles.statusIcon}>{getStatusIcon(!batteryOptimized)}</Text>
              <View style={styles.statusText}>
                <Text style={[styles.statusTitle, { color: colors.text }]}>
                  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏
                </Text>
                <Text style={[styles.statusDescription, { color: colors.textSecondary }]}>
                  {batteryOptimized ? '–í–∫–ª—é—á–µ–Ω–∞ (–º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
                </Text>
              </View>
            </View>
            {batteryOptimized && (
              <TouchableOpacity
                style={[styles.actionButton, { backgroundColor: colors.warning }]}
                onPress={openBatterySettings}
              >
                <Text style={styles.actionButtonText}>–û—Ç–∫–ª—é—á–∏—Ç—å</Text>
              </TouchableOpacity>
            )}
          </View>
        </View>


        {/* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
        {__DEV__ && (
          <View style={styles.section}>
            <Text style={[styles.sectionTitle, { color: colors.text }]}>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (DEV)</Text>

            <TouchableOpacity
              style={[styles.testButton, { backgroundColor: colors.primary }]}
              onPress={testNotification}
            >
              <Text style={styles.testButtonText}>‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.testButton, { backgroundColor: colors.secondary, marginTop: 12 }]}
              onPress={testScheduledNotification}
            >
              <Text style={styles.testButtonText}>‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ (5 —Å–µ–∫)</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.testButton, { backgroundColor: colors.warning, marginTop: 12 }]}
              onPress={testCriticalNotification}
            >
              <Text style={styles.testButtonText}>üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ (3 —Å–µ–∫)</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.testButton, { backgroundColor: colors.error, marginTop: 12 }]}
              onPress={cancelAllTests}
            >
              <Text style={styles.testButtonText}>‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.testButton, { backgroundColor: colors.info, marginTop: 12 }]}
              onPress={debugScheduled}
            >
              <Text style={styles.testButtonText}>üîç –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</Text>
            </TouchableOpacity>
          </View>
        )}

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
        <View style={styles.section}>
          <Text style={[styles.sectionTitle, { color: colors.text }]}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</Text>

          <TouchableOpacity
            style={[styles.menuItem, { borderBottomColor: colors.border }]}
            onPress={openAppSettings}
          >
            <View style={styles.menuItemContent}>
              <Text style={styles.menuIcon}>‚öôÔ∏è</Text>
              <View style={styles.menuText}>
                <Text style={[styles.menuTitle, { color: colors.text }]}>
                  –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                </Text>
                <Text style={[styles.menuDescription, { color: colors.textSecondary }]}>
                  –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                </Text>
              </View>
              <Text style={[styles.menuArrow, { color: colors.textSecondary }]}>‚Ä∫</Text>
            </View>
          </TouchableOpacity>
        </View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <View style={styles.infoSection}>
          <Text style={[styles.infoTitle, { color: colors.text }]}>–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö</Text>
          <Text style={[styles.infoText, { color: colors.textSecondary }]}>
            ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞ 30, 14, 7, 3, 2, 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏{'\n'}
            ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –¥–µ–Ω—å –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏ –ø–æ—Å–ª–µ{'\n'}
            ‚Ä¢ –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–∫–ª—é—á–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞—Ç–∞—Ä–µ–∏{'\n'}
            ‚Ä¢ –ù–∞ Android 12+ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ "Alarms & reminders"
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scroll: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
  },
  header: {
    padding: 20,
    paddingBottom: 10,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 16,
  },
  section: {
    marginTop: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 16,
    paddingHorizontal: 20,
  },
  statusItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
  },
  statusContent: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  statusIcon: {
    fontSize: 20,
    marginRight: 12,
  },
  statusText: {
    flex: 1,
  },
  statusTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 2,
  },
  statusDescription: {
    fontSize: 14,
  },
  actionButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
  },
  actionButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  menuItem: {
    borderBottomWidth: 1,
    paddingHorizontal: 20,
  },
  menuItemContent: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 16,
  },
  menuIcon: {
    fontSize: 20,
    marginRight: 12,
    width: 24,
    textAlign: 'center',
  },
  menuText: {
    flex: 1,
  },
  menuTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 2,
  },
  menuDescription: {
    fontSize: 14,
  },
  menuArrow: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  testButton: {
    marginHorizontal: 20,
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  testButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  infoSection: {
    marginTop: 30,
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
  },
  infoText: {
    fontSize: 14,
    lineHeight: 20,
  },
})
