import React, { useEffect, useState } from 'react'
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  TextInput,
} from 'react-native'
import { SafeAreaView } from '@/shared/ui/SafeAreaView'
import { useTheme } from '@/app/providers/theme'
import { SPACING } from '@/shared/config'
import { FONT_SIZE } from '@/shared/config/constants/font'
import { googleDriveService, FamilyGroup, FamilyMember } from '@/shared/lib/googleDrive'
import { familySyncService, SyncStatus } from '@/shared/lib/familySync'

export function FamilyAccessScreen() {
  const { colors } = useTheme()
  const [loading, setLoading] = useState(false)
  const [familyGroup, setFamilyGroup] = useState<FamilyGroup | null>(null)
  const [isOwner, setIsOwner] = useState(false)
  const [newMemberEmail, setNewMemberEmail] = useState('')
  const [newMemberName, setNewMemberName] = useState('')
  const [newGroupName, setNewGroupName] = useState('')
  const [syncStatus, setSyncStatus] = useState<SyncStatus>({
    isEnabled: false,
    lastSyncTime: null,
    isSyncing: false,
    hasChanges: false
  })

  useEffect(() => {
    loadFamilyGroup()
  }, [])

  const loadFamilyGroup = async () => {
    setLoading(true)
    try {
      const group = await googleDriveService.getFamilyGroup()
      setFamilyGroup(group)

      if (group) {
        const currentUser = await googleDriveService.getCurrentUser()
        setIsOwner(group.ownerEmail === currentUser?.email)
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const sync = await familySyncService.getSyncStatus()
      setSyncStatus(sync)
    } catch (error) {
      console.error('Failed to load family group:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleCreateFamilyGroup = async () => {
    if (!newGroupName.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø—ã')
      return
    }

    setLoading(true)
    try {
      const group = await googleDriveService.createFamilyGroup(newGroupName.trim())
      setFamilyGroup(group)
      setIsOwner(true)
      setNewGroupName('')
      Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–°–µ–º–µ–π–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!')
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–º–µ–π–Ω—É—é –≥—Ä—É–ø–ø—É')
    } finally {
      setLoading(false)
    }
  }

  const handleInviteMember = async () => {
    if (!newMemberEmail.trim() || !newMemberName.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
      return
    }

    setLoading(true)
    try {
      await googleDriveService.inviteFamilyMember(
        newMemberEmail.trim(),
        newMemberName.trim(),
        'parent'
      )
      setNewMemberEmail('')
      setNewMemberName('')
      await loadFamilyGroup()
      Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')
    } finally {
      setLoading(false)
    }
  }

  const handleAcceptInvitation = async () => {
    setLoading(true)
    try {
      const group = await googleDriveService.acceptFamilyInvitation()
      if (group) {
        setFamilyGroup(group)
        Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø–µ!')
      } else {
        Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
      }
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')
    } finally {
      setLoading(false)
    }
  }

  const handleToggleSync = async () => {
    try {
      const newEnabled = !syncStatus.isEnabled
      await familySyncService.setSyncEnabled(newEnabled)
      setSyncStatus(prev => ({ ...prev, isEnabled: newEnabled }))

      if (newEnabled) {
        Alert.alert('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞', '–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø–æ–π')
      } else {
        Alert.alert('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞')
      }
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    }
  }

  const handleForceSync = async () => {
    setLoading(true)
    try {
      await familySyncService.forceSync()
      await loadFamilyGroup()
      Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø–æ–π')
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
    } finally {
      setLoading(false)
    }
  }

  const handlePullData = async () => {
    setLoading(true)
    try {
      const success = await familySyncService.pullFamilyData()
      if (success) {
        await loadFamilyGroup()
        Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø—ã')
      } else {
        Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏')
      }
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    } finally {
      setLoading(false)
    }
  }

  const handleDebugInfo = async () => {
    try {
      const currentUser = await googleDriveService.getCurrentUser()
      const familyGroup = await googleDriveService.getFamilyGroup()
      const syncStatus = await familySyncService.getSyncStatus()

      const debugInfo = `
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${currentUser?.email || '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
–°–µ–º–µ–π–Ω–∞—è –≥—Ä—É–ø–ø–∞: ${familyGroup?.name || '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${syncStatus.isEnabled ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${syncStatus.lastSyncTime || '–ù–∏–∫–æ–≥–¥–∞'}
      `.trim()

      Alert.alert('–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', debugInfo)
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏', error.message)
    }
  }

  const handleReauthorize = async () => {
    try {
      setLoading(true)
      
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞
      await googleDriveService.signOut()
      
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setFamilyGroup(null)
      setSyncStatus({
        isEnabled: false,
        lastSyncTime: null,
        isSyncing: false,
        hasChanges: false
      })
      
      Alert.alert(
        '–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 
        '–í—ã–π–¥–∏—Ç–µ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.',
        [
          {
            text: 'OK',
            onPress: () => {
              // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
              loadFamilyGroup()
            }
          }
        ]
      )
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞')
    } finally {
      setLoading(false)
    }
  }

  const handleShowBypassInstructions = () => {
    Alert.alert(
      '–û–±—Ö–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Google',
      '–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–æ—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ "Google hasn\'t verified this app":\n\n' +
      '1. –ù–∞–∂–º–∏—Ç–µ "Advanced" (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)\n' +
      '2. –ù–∞–∂–º–∏—Ç–µ "Go to AidKit (unsafe)"\n' +
      '3. –ù–∞–∂–º–∏—Ç–µ "Allow"\n\n' +
      '–≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!',
      [
        { text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }
      ]
    )
  }

  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'owner': return 'üëë'
      case 'parent': return 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶'
      case 'child': return 'üë∂'
      default: return 'üë§'
    }
  }

  const getRoleText = (role: string) => {
    switch (role) {
      case 'owner': return '–í–ª–∞–¥–µ–ª–µ—Ü'
      case 'parent': return '–†–æ–¥–∏—Ç–µ–ª—å'
      case 'child': return '–†–µ–±–µ–Ω–æ–∫'
      default: return '–£—á–∞—Å—Ç–Ω–∏–∫'
    }
  }

  if (loading) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={colors.primary} />
          <Text style={[styles.loadingText, { color: colors.text }]}>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
        </View>
      </SafeAreaView>
    )
  }

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <Text style={[styles.title, { color: colors.text }]}>–°–µ–º–µ–π–Ω—ã–π –¥–æ—Å—Ç—É–ø</Text>

        {!familyGroup ? (
          <View style={styles.section}>
            <Text style={[styles.sectionTitle, { color: colors.text }]}>
              –°–æ–∑–¥–∞—Ç—å —Å–µ–º–µ–π–Ω—É—é –≥—Ä—É–ø–ø—É
            </Text>
            <Text style={[styles.sectionDescription, { color: colors.textSecondary }]}>
              –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–º–µ–π–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
            </Text>

            <TextInput
              style={[styles.input, {
                backgroundColor: colors.card,
                color: colors.text,
                borderColor: colors.border
              }]}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–π –≥—Ä—É–ø–ø—ã"
              placeholderTextColor={colors.textSecondary}
              value={newGroupName}
              onChangeText={setNewGroupName}
            />

            <TouchableOpacity
              style={[styles.createButton, { backgroundColor: colors.primary }]}
              onPress={handleCreateFamilyGroup}
              disabled={loading}
            >
              <Text style={styles.createButtonText}>–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É</Text>
            </TouchableOpacity>

            <View style={styles.divider}>
              <Text style={[styles.dividerText, { color: colors.textSecondary }]}>–∏–ª–∏</Text>
            </View>

            <TouchableOpacity
              style={[styles.acceptButton, { backgroundColor: colors.secondary }]}
              onPress={handleAcceptInvitation}
              disabled={loading}
            >
              <Text style={styles.acceptButtonText}>–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <View style={styles.section}>
            <View style={[styles.groupInfo, { backgroundColor: colors.card }]}>
              <Text style={[styles.groupName, { color: colors.text }]}>
                üë®‚Äçüë©‚Äçüëß‚Äçüë¶ {familyGroup.name}
              </Text>
              <Text style={[styles.groupCreated, { color: colors.textSecondary }]}>
                –°–æ–∑–¥–∞–Ω–∞: {new Date(familyGroup.createdTime).toLocaleDateString()}
              </Text>
            </View>

            <Text style={[styles.membersTitle, { color: colors.text }]}>
              –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({familyGroup.members.length})
            </Text>

            {familyGroup.members.map((member, index) => (
              <View key={index} style={[styles.memberItem, { backgroundColor: colors.card }]}>
                <View style={styles.memberInfo}>
                  <Text style={styles.memberIcon}>{getRoleIcon(member.role)}</Text>
                  <View>
                    <Text style={[styles.memberName, { color: colors.text }]}>
                      {member.name}
                    </Text>
                    <Text style={[styles.memberEmail, { color: colors.textSecondary }]}>
                      {member.email}
                    </Text>
                    <Text style={[styles.memberRole, { color: colors.primary }]}>
                      {getRoleText(member.role)}
                    </Text>
                  </View>
                </View>
                <View style={styles.memberStatus}>
                  <Text style={[
                    styles.statusText,
                    { color: member.isActive ? colors.success : colors.warning }
                  ]}>
                    {member.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç'}
                  </Text>
                </View>
              </View>
            ))}

            {/* –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö */}
            <View style={styles.syncSection}>
              <Text style={[styles.syncTitle, { color: colors.text }]}>
                –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
              </Text>

              {!syncStatus.isEnabled && (
                <View style={[styles.syncHint, { backgroundColor: colors.warning + '20', borderColor: colors.warning }]}>
                  <Text style={[styles.syncHintText, { color: colors.warning }]}>
                    üí° –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ–º—å–µ–π
                  </Text>
                </View>
              )}

              <View style={[styles.syncStatus, { backgroundColor: colors.card }]}>
                <View style={styles.syncStatusRow}>
                  <Text style={[styles.syncStatusLabel, { color: colors.text }]}>
                    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:
                  </Text>
                  <TouchableOpacity
                    style={[
                      styles.syncToggle,
                      { backgroundColor: syncStatus.isEnabled ? colors.success : colors.border }
                    ]}
                    onPress={handleToggleSync}
                  >
                    <Text style={styles.syncToggleText}>
                      {syncStatus.isEnabled ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
                    </Text>
                  </TouchableOpacity>
                </View>

                {syncStatus.lastSyncTime && (
                  <Text style={[styles.syncLastTime, { color: colors.textSecondary }]}>
                    –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {new Date(syncStatus.lastSyncTime).toLocaleString()}
                  </Text>
                )}

                {syncStatus.hasChanges && (
                  <Text style={[styles.syncChanges, { color: colors.warning }]}>
                    ‚ö†Ô∏è –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                  </Text>
                )}
              </View>

              <View style={styles.syncActions}>
                <TouchableOpacity
                  style={[styles.syncButton, { backgroundColor: colors.primary }]}
                  onPress={handleForceSync}
                  disabled={loading}
                >
                  <Text style={styles.syncButtonText}>üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={[styles.syncButton, { backgroundColor: colors.secondary }]}
                  onPress={handlePullData}
                  disabled={loading}
                >
                  <Text style={styles.syncButtonText}>‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å</Text>
                </TouchableOpacity>
              </View>

              <View style={styles.debugActions}>
                <TouchableOpacity
                  style={[styles.debugButton, { backgroundColor: colors.border }]}
                  onPress={handleDebugInfo}
                >
                  <Text style={[styles.debugButtonText, { color: colors.text }]}>
                    üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={[styles.debugButton, { backgroundColor: colors.warning }]}
                  onPress={handleReauthorize}
                  disabled={loading}
                >
                  <Text style={[styles.debugButtonText, { color: '#FFFFFF' }]}>
                    üîÑ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                  </Text>
                </TouchableOpacity>
              </View>
            </View>

            {isOwner && (
              <View style={styles.inviteSection}>
                <Text style={[styles.inviteTitle, { color: colors.text }]}>
                  –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
                </Text>

                <TextInput
                  style={[styles.input, {
                    backgroundColor: colors.card,
                    color: colors.text,
                    borderColor: colors.border
                  }]}
                  placeholder="–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                  placeholderTextColor={colors.textSecondary}
                  value={newMemberName}
                  onChangeText={setNewMemberName}
                />

                <TextInput
                  style={[styles.input, {
                    backgroundColor: colors.card,
                    color: colors.text,
                    borderColor: colors.border
                  }]}
                  placeholder="Email —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                  placeholderTextColor={colors.textSecondary}
                  value={newMemberEmail}
                  onChangeText={setNewMemberEmail}
                  keyboardType="email-address"
                  autoCapitalize="none"
                />

                <TouchableOpacity
                  style={[styles.inviteButton, { backgroundColor: colors.primary }]}
                  onPress={handleInviteMember}
                  disabled={loading}
                >
                  <Text style={styles.inviteButtonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
    padding: SPACING.lg,
  },
  title: {
    fontSize: FONT_SIZE.xxl,
    fontWeight: 'bold',
    marginBottom: SPACING.lg,
  },
  section: {
    marginBottom: SPACING.xl,
  },
  sectionTitle: {
    fontSize: FONT_SIZE.lg,
    fontWeight: '600',
    marginBottom: SPACING.sm,
  },
  sectionDescription: {
    fontSize: FONT_SIZE.md,
    marginBottom: SPACING.lg,
    lineHeight: 20,
  },
  input: {
    borderWidth: 1,
    borderRadius: 8,
    padding: SPACING.md,
    fontSize: FONT_SIZE.md,
    marginBottom: SPACING.md,
  },
  createButton: {
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.lg,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: SPACING.lg,
  },
  createButtonText: {
    color: '#FFFFFF',
    fontSize: FONT_SIZE.lg,
    fontWeight: '600',
  },
  acceptButton: {
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.lg,
    borderRadius: 8,
    alignItems: 'center',
  },
  acceptButtonText: {
    color: '#FFFFFF',
    fontSize: FONT_SIZE.lg,
    fontWeight: '600',
  },
  divider: {
    alignItems: 'center',
    marginVertical: SPACING.lg,
  },
  dividerText: {
    fontSize: FONT_SIZE.md,
  },
  groupInfo: {
    padding: SPACING.lg,
    borderRadius: 12,
    marginBottom: SPACING.lg,
  },
  groupName: {
    fontSize: FONT_SIZE.xl,
    fontWeight: '600',
    marginBottom: SPACING.sm,
  },
  groupCreated: {
    fontSize: FONT_SIZE.sm,
  },
  membersTitle: {
    fontSize: FONT_SIZE.lg,
    fontWeight: '600',
    marginBottom: SPACING.md,
  },
  memberItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: SPACING.md,
    borderRadius: 8,
    marginBottom: SPACING.sm,
  },
  memberInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  memberIcon: {
    fontSize: 24,
    marginRight: SPACING.md,
  },
  memberName: {
    fontSize: FONT_SIZE.md,
    fontWeight: '500',
  },
  memberEmail: {
    fontSize: FONT_SIZE.sm,
    marginTop: 2,
  },
  memberRole: {
    fontSize: FONT_SIZE.sm,
    fontWeight: '500',
    marginTop: 2,
  },
  memberStatus: {
    alignItems: 'flex-end',
  },
  statusText: {
    fontSize: FONT_SIZE.sm,
    fontWeight: '500',
  },
  inviteSection: {
    marginTop: SPACING.xl,
    paddingTop: SPACING.lg,
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
  },
  inviteTitle: {
    fontSize: FONT_SIZE.lg,
    fontWeight: '600',
    marginBottom: SPACING.md,
  },
  inviteButton: {
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.lg,
    borderRadius: 8,
    alignItems: 'center',
  },
  inviteButtonText: {
    color: '#FFFFFF',
    fontSize: FONT_SIZE.md,
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: SPACING.md,
    fontSize: FONT_SIZE.md,
  },
  syncSection: {
    marginTop: SPACING.xl,
    paddingTop: SPACING.lg,
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
  },
  syncTitle: {
    fontSize: FONT_SIZE.lg,
    fontWeight: '600',
    marginBottom: SPACING.md,
  },
  syncStatus: {
    padding: SPACING.md,
    borderRadius: 8,
    marginBottom: SPACING.md,
  },
  syncStatusRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING.sm,
  },
  syncStatusLabel: {
    fontSize: FONT_SIZE.md,
    fontWeight: '500',
  },
  syncToggle: {
    paddingVertical: SPACING.sm,
    paddingHorizontal: SPACING.md,
    borderRadius: 6,
  },
  syncToggleText: {
    color: '#FFFFFF',
    fontSize: FONT_SIZE.sm,
    fontWeight: '600',
  },
  syncLastTime: {
    fontSize: FONT_SIZE.sm,
    marginBottom: SPACING.sm,
  },
  syncChanges: {
    fontSize: FONT_SIZE.sm,
    fontWeight: '500',
  },
  syncActions: {
    flexDirection: 'row',
    gap: SPACING.md,
  },
  syncButton: {
    flex: 1,
    paddingVertical: SPACING.md,
    paddingHorizontal: SPACING.lg,
    borderRadius: 8,
    alignItems: 'center',
  },
  syncButtonText: {
    color: '#FFFFFF',
    fontSize: FONT_SIZE.md,
    fontWeight: '600',
  },
  syncHint: {
    padding: SPACING.md,
    borderRadius: 8,
    borderWidth: 1,
    marginBottom: SPACING.md,
  },
  syncHintText: {
    fontSize: FONT_SIZE.sm,
    fontWeight: '500',
    textAlign: 'center',
  },
  debugButton: {
    paddingVertical: SPACING.sm,
    paddingHorizontal: SPACING.md,
    borderRadius: 6,
    alignItems: 'center',
    marginTop: SPACING.md,
  },
  debugButtonText: {
    fontSize: FONT_SIZE.sm,
    fontWeight: '500',
  },
  debugActions: {
    flexDirection: 'row',
    gap: SPACING.sm,
    marginTop: SPACING.md,
  },
})
