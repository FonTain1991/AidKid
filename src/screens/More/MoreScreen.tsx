import type { RootStackParamList } from '@/app/navigation/types'
import { useTheme } from '@/app/providers/theme'
import { SPACING } from '@/shared/config'
import { FONT_SIZE } from '@/shared/config/constants/font'
import { SafeAreaView } from '@/shared/ui/SafeAreaView'
import { useNavigation } from '@react-navigation/native'
import type { NativeStackNavigationProp } from '@react-navigation/native-stack'
import { ScrollView, StyleSheet, Text, TouchableOpacity, View, Alert, Linking } from 'react-native'
import { displayName } from '../../../app.json'
import DeviceInfo from 'react-native-device-info'
import AsyncStorage from '@react-native-async-storage/async-storage'

type NavigationProp = NativeStackNavigationProp<RootStackParamList>

export function MoreScreen() {
  const { colors } = useTheme()
  const navigation = useNavigation<NavigationProp>()

  const handleShowOnboarding = async () => {
    Alert.alert(
      '–ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ',
      '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã —Å–Ω–æ–≤–∞?',
      [
        {
          text: '–û—Ç–º–µ–Ω–∞',
          style: 'cancel'
        },
        {
          text: '–ü–æ–∫–∞–∑–∞—Ç—å',
          onPress: async () => {
            try {
              await AsyncStorage.removeItem('@onboarding_completed')
              Alert.alert(
                '–ì–æ—Ç–æ–≤–æ',
                '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã'
              )
            } catch (error) {
              console.error('Failed to reset onboarding:', error)
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
            }
          }
        }
      ]
    )
  }

  const handleSupport = async () => {
    const telegramUrl = 'https://t.me/+ZppyHhxkvdgxMDMy'
    try {
      const canOpen = await Linking.canOpenURL(telegramUrl)
      if (canOpen) {
        await Linking.openURL(telegramUrl)
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Telegram')
      }
    } catch (error) {
      console.error('Failed to open Telegram:', error)
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É')
    }
  }

  const menuItems = [
    {
      title: '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
      description: '–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏',
      icon: 'üõí',
      onPress: () => {
        navigation.navigate('ShoppingList')
      },
    },
    {
      title: '–ß–ª–µ–Ω—ã —Å–µ–º—å–∏',
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–ª–µ–Ω–∞–º–∏ —Å–µ–º—å–∏',
      icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      onPress: () => {
        navigation.navigate('FamilyMembers')
      },
    },
    {
      title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö',
      icon: 'üîî',
      onPress: () => {
        navigation.navigate('NotificationSettings')
      },
    },
    {
      title: '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
      icon: 'üíæ',
      onPress: () => {
        navigation.navigate('Backup')
      },
    },
    {
      title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
      description: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ',
      icon: 'üí¨',
      onPress: handleSupport,
    },
    {
      title: '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
      description: '–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã',
      icon: 'üí°',
      onPress: handleShowOnboarding,
    },
  ]

  return (
    <SafeAreaView edges={['bottom']} style={[styles.container, { backgroundColor: colors.background }]}>
      <ScrollView style={styles.scroll} contentContainerStyle={styles.scrollContent}>
        <View>
          <View style={styles.section}>
            {menuItems.map((item, index) => (
              <TouchableOpacity
                key={index}
                style={[styles.menuItem, { borderBottomColor: colors.border }]}
                onPress={item.onPress}
              >
                <View style={styles.menuItemContent}>
                  <Text style={styles.menuIcon}>{item.icon}</Text>
                  <View style={styles.menuText}>
                    <Text style={[styles.menuTitle, { color: colors.text }]}>
                      {item.title}
                    </Text>
                    <Text style={[styles.menuDescription, { color: colors.textSecondary }]}>
                      {item.description}
                    </Text>
                  </View>
                  <Text style={[styles.menuArrow, { color: colors.textSecondary }]}>‚Ä∫</Text>
                </View>
              </TouchableOpacity>
            ))}
          </View>
        </View>
        <View style={styles.footer}>
          <Text style={[styles.version, { color: colors.textSecondary }]}>
            {displayName} v{DeviceInfo.getVersion()}
          </Text>
          <Text style={[styles.copyright, { color: colors.textSecondary }]}>
            ¬© {new Date().getFullYear()}. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    justifyContent: 'space-between',
  },
  scroll: {
    flex: 1,
  },
  header: {
    padding: SPACING.md,
    paddingBottom: SPACING.sm,
  },
  title: {
    fontSize: FONT_SIZE.heading,
    fontWeight: 'bold',
    marginBottom: SPACING.sm,
  },
  subtitle: {
    fontSize: FONT_SIZE.md,
  },
  section: {
    marginTop: SPACING.md,
  },
  menuItem: {
    borderBottomWidth: 1,
    paddingHorizontal: SPACING.md,
  },
  menuItemContent: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: SPACING.md,
  },
  menuIcon: {
    fontSize: FONT_SIZE.xl,
    marginRight: SPACING.md,
    width: 32,
    textAlign: 'center',
  },
  menuText: {
    flex: 1,
  },
  menuTitle: {
    fontSize: FONT_SIZE.xl,
    fontWeight: '600',
    marginBottom: SPACING.sm,
  },
  menuDescription: {
    fontSize: FONT_SIZE.sm,
  },
  menuArrow: {
    fontSize: FONT_SIZE.md,
    fontWeight: 'bold',
  },
  footer: {
    padding: SPACING.md,
    alignItems: 'center',
    marginTop: 40,
  },
  version: {
    fontSize: FONT_SIZE.sm,
    marginBottom: SPACING.sm,
  },
  copyright: {
    fontSize: FONT_SIZE.sm,
  },
})
