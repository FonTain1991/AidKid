import React, { useState, useEffect } from 'react'
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert, Image } from 'react-native'
import { SafeAreaView } from '@/shared/ui/SafeAreaView'
import { useTheme } from '@/app/providers/theme'
import { useQuickIntakeStyles } from '@/shared/hooks/useQuickIntakeStyles'
import { SPACING } from '@/shared/config'
import { FONT_SIZE } from '@/shared/config/constants/font'
import { databaseService } from '@/shared/lib/database'
import { getMedicinePhotoUri } from '@/shared/lib'
import { Medicine, MedicineStock } from '@/entities/medicine/model/types'
import { MedicineKit } from '@/entities/kit/model/types'

export function QuickIntakeScreen() {
  const { colors } = useTheme()
  const styles = useQuickIntakeStyles()
  const [medicines, setMedicines] = useState<Medicine[]>([])
  const [stocks, setStocks] = useState<Map<string, MedicineStock>>(new Map())
  const [kits, setKits] = useState<Map<string, MedicineKit>>(new Map())
  const [selectedMedicines, setSelectedMedicines] = useState<Set<string>>(new Set())
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    loadData()
  }, [])

  const loadData = async () => {
    try {
      setIsLoading(true)
      console.log('üîç Loading data for quick intake...')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('üîß Checking database initialization...')
      await databaseService.init()
      console.log('‚úÖ Database initialized')

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–ø—Ç–µ—á–∫–∏
      console.log('üì¶ Loading kits...')
      const allKits = await databaseService.getKits()
      console.log('üì¶ Kits loaded:', allKits.length)
      const kitsMap = new Map(allKits.map(kit => [kit.id, kit]))
      setKits(kitsMap)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
      console.log('üíä Loading medicines...')
      const allMedicines = await databaseService.getMedicines()
      console.log('üíä Medicines loaded:', allMedicines.length)
      setMedicines(allMedicines)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∞—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
      console.log('üìã Loading stocks...')
      const stocksMap = new Map<string, MedicineStock>()

      for (const medicine of allMedicines) {
        try {
          const stock = await databaseService.getMedicineStock(medicine.id)
          if (stock) {
            stocksMap.set(medicine.id, stock)
          }
        } catch (error) {
          console.warn(`Failed to load stock for medicine ${medicine.id}:`, error)
        }
      }

      console.log('üìã Stocks loaded:', stocksMap.size)
      setStocks(stocksMap)

      console.log('‚úÖ Data loaded successfully')
    } catch (error) {
      console.error('‚ùå Failed to load data:', error)
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${errorMessage}`)
    } finally {
      setIsLoading(false)
    }
  }

  const toggleMedicineSelection = (medicineId: string) => {
    setSelectedMedicines(prev => {
      const newSet = new Set(prev)
      if (newSet.has(medicineId)) {
        newSet.delete(medicineId)
      } else {
        newSet.add(medicineId)
      }
      return newSet
    })
  }

  const handleBatchIntake = async () => {
    if (selectedMedicines.size === 0) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ')
      return
    }

    try {
      let successCount = 0
      let outOfStockCount = 0
      const results: string[] = []

      for (const medicineId of selectedMedicines) {
        const medicine = medicines.find(m => m.id === medicineId)
        if (!medicine) {
          continue
        }

        const stock = stocks.get(medicineId)

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        await databaseService.createMedicineUsage({
          medicineId,
          quantityUsed: 1,
          usageDate: new Date(),
          notes: '–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–∏–µ–º (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π)'
        })

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∞—Å, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if (stock && stock.quantity > 0) {
          const updatedStock = {
            ...stock,
            quantity: stock.quantity - 1,
            updatedAt: new Date(),
          }

          await databaseService.updateMedicineStock(stock.id, {
            quantity: updatedStock.quantity,
            updatedAt: updatedStock.updatedAt,
          })

          setStocks(prev => new Map(prev.set(medicineId, updatedStock)))
          results.push(`‚úÖ ${medicine.name}: ${updatedStock.quantity} ${stock.unit}`)
          successCount++
        } else {
          results.push(`‚ö†Ô∏è ${medicine.name}: –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å`)
          outOfStockCount++
        }
      }

      // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
      setSelectedMedicines(new Set())

      Alert.alert(
        '‚úÖ –ü—Ä–∏–µ–º –æ—Ç–º–µ—á–µ–Ω',
        `–ü—Ä–∏–Ω—è—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤: ${successCount}\n${outOfStockCount > 0 ? `–ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å: ${outOfStockCount}\n` : ''}\n${results.join('\n')}`
      )
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      console.error('Failed to record batch intake:', error)
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–µ–º: ${errorMessage}`)
    }
  }

  const handleIntake = async (medicine: Medicine) => {
    try {
      const stock = stocks.get(medicine.id)

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
      await databaseService.createMedicineUsage({
        medicineId: medicine.id,
        quantityUsed: 1,
        usageDate: new Date(),
        notes: '–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–∏–µ–º'
      })

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∞—Å, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      if (stock && stock.quantity > 0) {
        const updatedStock = {
          ...stock,
          quantity: stock.quantity - 1,
          updatedAt: new Date(),
        }

        await databaseService.updateMedicineStock(stock.id, {
          quantity: updatedStock.quantity,
          updatedAt: updatedStock.updatedAt,
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setStocks(prev => new Map(prev.set(medicine.id, updatedStock)))

        Alert.alert(
          '‚úÖ –ü—Ä–∏–µ–º –æ—Ç–º–µ—á–µ–Ω',
          `${medicine.name} –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ!\n\n–û—Å—Ç–∞–ª–æ—Å—å: ${updatedStock.quantity} ${stock.unit}`
        )
      } else {
        // –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞
        Alert.alert(
          '‚úÖ –ü—Ä–∏–µ–º –æ—Ç–º–µ—á–µ–Ω',
          `${medicine.name} –ø—Ä–∏–Ω—è—Ç —É—Å–ø–µ—à–Ω–æ!${!stock || stock.quantity === 0 ? '\n\n‚ö†Ô∏è –ó–∞–ø–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è' : ''}`
        )
      }
    } catch (error) {
      console.error('Failed to mark intake:', error)
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–µ–º')
    }
  }

  const getKitName = (kitId: string) => {
    return kits.get(kitId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–ø—Ç–µ—á–∫–∞'
  }

  const getStockInfo = (medicine: Medicine) => {
    const stock = stocks.get(medicine.id)
    if (!stock) {
      return { text: '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏', color: colors.error }
    }

    if (stock.quantity <= 0) {
      return { text: '–ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å', color: colors.error }
    }
    if (stock.quantity <= 5) {
      return { text: `${stock.quantity} ${stock.unit}`, color: colors.warning }
    }

    return { text: `${stock.quantity} ${stock.unit}`, color: colors.success }
  }

  if (isLoading) {
    return (
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={styles.loadingContainer}>
          <Text style={[styles.loadingText, { color: colors.text }]}>
            –ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤...
          </Text>
        </View>
      </SafeAreaView>
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–¥–∞–∂–µ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞)
  const availableMedicines = medicines

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–ø—Ç–µ—á–∫–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  const medicinesByKit = availableMedicines.reduce((acc, medicine) => {
    const { kitId } = medicine
    if (!acc[kitId]) {
      acc[kitId] = []
    }
    acc[kitId].push(medicine)
    return acc
  }, {} as Record<string, Medicine[]>)

  return (
    <SafeAreaView edges={['bottom']} style={[styles.container, { backgroundColor: colors.background }]}>
      <ScrollView style={styles.scroll}>
        <View style={styles.header}>
          <Text style={[styles.title, { color: colors.text }]}>–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–∏–µ–º</Text>
          <Text style={[styles.subtitle, { color: colors.textSecondary }]}>
            –í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–µ–º–∞
          </Text>
        </View>

        {availableMedicines.length === 0 ? (
          <View style={styles.emptyContainer}>
            <Text style={[styles.emptyTitle, { color: colors.text }]}>
              –ù–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤
            </Text>
            <Text style={[styles.emptyDescription, { color: colors.textSecondary }]}>
              –î–æ–±–∞–≤—å—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ –∞–ø—Ç–µ—á–∫–∏
            </Text>
          </View>
        ) : (
          <View style={styles.medicinesList}>
            {Object.entries(medicinesByKit).map(([kitId, kitMedicines]) => {
              const kitName = getKitName(kitId)

              return (
                <View key={kitId} style={styles.kitSection}>
                  <Text style={[styles.kitTitle, { color: colors.text }]}>
                    üì¶ {kitName} ({kitMedicines.length})
                  </Text>

                  {kitMedicines.map(medicine => {
                    const stockInfo = getStockInfo(medicine)
                    const stock = stocks.get(medicine.id)
                    const isOutOfStock = !stock || stock.quantity === 0
                    const isSelected = selectedMedicines.has(medicine.id)

                    return (
                      <TouchableOpacity
                        key={medicine.id}
                        style={[
                          styles.medicineCard,
                          {
                            borderColor: isSelected ? colors.primary : colors.border,
                            borderWidth: isSelected ? 2 : 1,
                            opacity: isOutOfStock ? 0.5 : 1,
                            backgroundColor: isOutOfStock ? '#f5f5f5' : isSelected ? colors.primary + '10' : 'white'
                          }
                        ]}
                        onPress={() => (isOutOfStock ? null : toggleMedicineSelection(medicine.id))}
                        onLongPress={() => !isOutOfStock && handleIntake(medicine)}
                        disabled={isOutOfStock}
                      >
                        <View style={styles.medicineContent}>
                          {/* –§–æ—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ */}
                          {medicine.photoPath ? (
                            <Image
                              source={{ uri: getMedicinePhotoUri(medicine.photoPath) || undefined }}
                              style={styles.medicinePhoto}
                            />
                          ) : (
                            <View style={styles.medicinePhotoPlaceholder}>
                              <Text style={styles.medicinePhotoIcon}>üíä</Text>
                            </View>
                          )}

                          <View style={styles.medicineInfo}>
                            <Text style={[styles.medicineName, { color: colors.text }]}>
                              {medicine.name}
                            </Text>
                            <Text style={[styles.medicineForm, { color: colors.textSecondary }]}>
                              {medicine.form}
                            </Text>
                          </View>

                          <View style={styles.medicineRight}>
                            <View style={[styles.stockBadge, { backgroundColor: stockInfo.color }]}>
                              <Text style={styles.stockText}>{stockInfo.text}</Text>
                            </View>
                            {isSelected && !isOutOfStock && (
                              <View style={[styles.checkmark, { backgroundColor: colors.primary }]}>
                                <Text style={styles.checkmarkText}>‚úì</Text>
                              </View>
                            )}
                          </View>
                        </View>
                      </TouchableOpacity>
                    )
                  })}
                </View>
              )
            })}
          </View>
        )}

        <View style={styles.infoSection}>
          <Text style={[styles.infoTitle, { color: colors.text }]}>–û –±—ã—Å—Ç—Ä–æ–º –ø—Ä–∏–µ–º–µ</Text>
          <Text style={[styles.infoText, { color: colors.textSecondary }]}>
            ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ{'\n'}
            ‚Ä¢ –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø—Ä–∏–µ–º{'\n'}
            ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É
          </Text>
        </View>
      </ScrollView>

      {/* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ */}
      {selectedMedicines.size > 0 && (
        <View style={[styles.floatingButton, { backgroundColor: colors.primary }]}>
          <TouchableOpacity
            style={styles.floatingButtonContent}
            onPress={handleBatchIntake}
          >
            <Text style={styles.floatingButtonText}>
              –ü—Ä–∏–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({selectedMedicines.size})
            </Text>
          </TouchableOpacity>
        </View>
      )}
    </SafeAreaView>
  )
}

// Styles —Ç–µ–ø–µ—Ä—å –≤ useQuickIntakeStyles hook

