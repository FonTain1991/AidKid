/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ —á–µ—Ä–µ–∑ RevenueCat
 */

import Purchases, {
  CustomerInfo,
  PurchasesOffering,
  PurchasesPackage,
  PurchasesError,
} from 'react-native-purchases'
import { Platform } from 'react-native'
import {
  getRevenueCatApiKey,
  PREMIUM_ENTITLEMENT_ID,
  DEFAULT_OFFERING_ID,
} from './subscriptionConfig'

export interface SubscriptionStatus {
  isPremium: boolean
  isInitialized: boolean
  customerInfo: CustomerInfo | null
  expirationDate: Date | null
}

class SubscriptionService {
  private isInitialized = false

  private customerInfo: CustomerInfo | null = null

  private initializationError: Error | null = null

  // –ö–µ—à –¥–ª—è –ø—Ä—è–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (fallback, –µ—Å–ª–∏ storeProduct –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)
  private directProductsCache: Map<string, any> = new Map()

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RevenueCat
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async initialize(userId?: string): Promise<void> {
    if (this.isInitialized) {
      return
    }

    try {
      const apiKey = getRevenueCatApiKey()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (apiKey.includes('YOUR_')) {
        console.warn('‚ö†Ô∏è RevenueCat API key not configured. Subscription features will not work.')
        this.initializationError = new Error('API key not configured')
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ (–¥–ª—è production –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å goog_)
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç test_XXXXX (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
      if (Platform.OS === 'android' && !__DEV__ && !apiKey.startsWith('goog_')) {
        console.error('‚ùå Invalid Android Production API key format! Should start with "goog_"')
        console.error('   Current key:', apiKey)
        this.initializationError = new Error('Invalid API key format')
        return
      }

      await Purchases.configure({ apiKey })
      console.log('üîë RevenueCat configured with API key:', apiKey.substring(0, 20) + '...')

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (userId) {
        await Purchases.logIn(userId)
        console.log('üë§ RevenueCat: User logged in:', userId)
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      this.customerInfo = await Purchases.getCustomerInfo()
      console.log('üë§ RevenueCat: Customer info loaded')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Play Billing
      try {
        const canMakePayments = await Purchases.canMakePayments()
        console.log('üí≥ RevenueCat: Can make payments:', canMakePayments)
      } catch (err) {
        console.warn('‚ö†Ô∏è RevenueCat: Error checking payment availability:', err)
      }

      this.isInitialized = true
      console.log('‚úÖ RevenueCat initialized successfully')
    } catch (error) {
      console.error('‚ùå Error initializing RevenueCat:', error)
      this.initializationError = error as Error
      this.isInitialized = false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async isPremium(): Promise<boolean> {
    try {
      if (!this.isInitialized && !this.initializationError) {
        // –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        await this.initialize()
      }

      if (!this.isInitialized) {
        return false
      }

      const customerInfo = await this.getCustomerInfo()
      return customerInfo.entitlements.active[PREMIUM_ENTITLEMENT_ID] !== undefined
    } catch (error) {
      console.error('Error checking premium status:', error)
      return false
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
   */
  async getCustomerInfo(): Promise<CustomerInfo> {
    try {
      this.customerInfo = await Purchases.getCustomerInfo()
      return this.customerInfo
    } catch (error) {
      console.error('Error getting customer info:', error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async getSubscriptionStatus(): Promise<SubscriptionStatus> {
    try {
      const customerInfo = await this.getCustomerInfo()
      const entitlement = customerInfo.entitlements.active[PREMIUM_ENTITLEMENT_ID]

      return {
        isPremium: entitlement !== undefined,
        isInitialized: this.isInitialized,
        customerInfo,
        expirationDate: entitlement?.expirationDate
          ? new Date(entitlement.expirationDate)
          : null,
      }
    } catch (error) {
      console.error('Error getting subscription status:', error)
      return {
        isPremium: false,
        isInitialized: this.isInitialized,
        customerInfo: null,
        expirationDate: null,
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ (offerings)
   */
  async getOfferings(): Promise<PurchasesOffering | null> {
    try {
      if (!this.isInitialized) {
        await this.initialize()
      }

      console.log('üîÑ Fetching offerings from RevenueCat...')
      const offerings = await Purchases.getOfferings()
      const { current } = offerings

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (current) {
        console.log('üì¶ RevenueCat Offerings loaded:', {
          identifier: current.identifier,
          packagesCount: current.availablePackages.length,
          packages: current.availablePackages.map(pkg => ({
            identifier: pkg.identifier,
            hasStoreProduct: !!pkg.storeProduct,
            productId: pkg.storeProduct?.identifier,
            price: pkg.storeProduct?.priceString,
            title: pkg.storeProduct?.title,
            packageType: pkg.packageType,
          })),
        })

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –ø–æ Product ID –∏–∑ Google Play
        const productIds = ['premium_monthly', 'premium_yearly']
        console.log('üîÑ Attempting to fetch products directly by ID:', productIds)

        try {
          const directProducts = await Purchases.getProducts(productIds, 'SUBS')
          console.log('‚úÖ Direct products fetched:', directProducts.map(p => ({
            identifier: p.identifier,
            title: p.title,
            price: p.priceString,
            currencyCode: p.currencyCode,
          })))

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI
          directProducts.forEach(product => {
            // –ö–µ—à–∏—Ä—É–µ–º –ø–æ –ø–æ–ª–Ω–æ–º—É ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, premium_monthly:base-monthly)
            this.directProductsCache.set(product.identifier, product)

            // –¢–∞–∫–∂–µ –∫–µ—à–∏—Ä—É–µ–º –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const shortId = product.identifier.split(':')[0]
            if (shortId) {
              this.directProductsCache.set(shortId, product)
            }
          })

          // –ï—Å–ª–∏ storeProduct –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å direct products —Å packages
          for (const pkg of current.availablePackages) {
            if (!pkg.storeProduct) {
              // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π product –ø–æ identifier
              const matchingProduct = directProducts.find(p => (pkg.identifier.includes('monthly')
                ? p.identifier.includes('monthly')
                : p.identifier.includes('yearly')))

              if (matchingProduct) {
                console.log(`‚úÖ Found matching product for package ${pkg.identifier}:`, matchingProduct.identifier)
                  // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º storeProduct –Ω–∞–ø—Ä—è–º—É—é (patch –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ UI)
                  ; (pkg as any).storeProduct = matchingProduct
              }
            }
          }
        } catch (err) {
          console.error('‚ùå Error fetching products directly:', err)
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ package
        for (const pkg of current.availablePackages) {
          if (!pkg.storeProduct) {
            console.warn(`‚ö†Ô∏è Package ${pkg.identifier} has no storeProduct`)
            console.warn('   Package type:', pkg.packageType)
          } else {
            console.log(`‚úÖ Package ${pkg.identifier} has storeProduct:`, {
              identifier: pkg.storeProduct.identifier,
              title: pkg.storeProduct.title,
              price: pkg.storeProduct.priceString,
              currencyCode: pkg.storeProduct.currencyCode,
            })
          }
        }
      } else {
        console.warn('‚ö†Ô∏è RevenueCat: No current offering found')
        console.warn('   All offerings:', Object.keys(offerings.all))
      }

      return current
    } catch (error) {
      console.error('‚ùå Error getting offerings:', error)
      return null
    }
  }

  /**
   * –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async purchasePackage(pkg: PurchasesPackage): Promise<CustomerInfo> {
    try {
      const { customerInfo } = await Purchases.purchasePackage(pkg)
      this.customerInfo = customerInfo
      return customerInfo
    } catch (error) {
      const purchasesError = error as PurchasesError

      if (purchasesError.userCancelled) {
        console.log('User cancelled purchase')
        throw new Error('Purchase cancelled by user')
      } else {
        console.error('Error purchasing package:', purchasesError)
        throw purchasesError
      }
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
   */
  async restorePurchases(): Promise<CustomerInfo> {
    try {
      const customerInfo = await Purchases.restorePurchases()
      this.customerInfo = customerInfo
      return customerInfo
    } catch (error) {
      console.error('Error restoring purchases:', error)
      throw error
    }
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–∫—É–ø–æ–∫ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async linkUserAccount(userId: string): Promise<CustomerInfo> {
    try {
      const { customerInfo } = await Purchases.logIn(userId)
      this.customerInfo = customerInfo
      return customerInfo
    } catch (error) {
      console.error('Error linking user account:', error)
      throw error
    }
  }

  /**
   * –û—Ç–≤—è–∑–∫–∞ –ø–æ–∫—É–ø–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async unlinkUserAccount(): Promise<CustomerInfo> {
    try {
      const customerInfo = await Purchases.logOut()
      this.customerInfo = customerInfo
      return customerInfo
    } catch (error) {
      console.error('Error unlinking user account:', error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ RevenueCat User ID
   */
  async getRevenueCatUserId(): Promise<string> {
    try {
      const customerInfo = await this.getCustomerInfo()
      return customerInfo.originalAppUserId
    } catch (error) {
      console.error('Error getting RevenueCat User ID:', error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (fallback –¥–ª—è storeProduct)
   */
  getDirectProduct(productId: string): any | null {
    // –ò—â–µ–º –ø–æ –ø–æ–ª–Ω–æ–º—É ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–º—É
    return this.directProductsCache.get(productId) ||
      this.directProductsCache.get(productId.split(':')[0]) ||
      null
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä—è–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫–µ—à–∞
   */
  getAllDirectProducts(): any[] {
    return Array.from(this.directProductsCache.values())
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –±—ã–ª–∞)
   */
  getInitializationError(): Error | null {
    return this.initializationError
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
   */
  getIsInitialized(): boolean {
    return this.isInitialized
  }
}

export const subscriptionService = new SubscriptionService()

