import { launchImageLibrary, launchCamera, ImagePickerResponse, Asset } from 'react-native-image-picker'
import { Platform, PermissionsAndroid, Alert } from 'react-native'
import RNFS from 'react-native-fs'

const PHOTOS_DIR = `${RNFS.DocumentDirectoryPath}/medicine_photos`

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ
 */
export async function initPhotosDirectory(): Promise<void> {
  try {
    const exists = await RNFS.exists(PHOTOS_DIR)
    if (!exists) {
      await RNFS.mkdir(PHOTOS_DIR)
      console.log('üìÅ Created photos directory:', PHOTOS_DIR)
    }
  } catch (error) {
    console.error('Failed to create photos directory:', error)
  }
}

/**
 * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–º–µ—Ä—É (Android)
 */
async function requestCameraPermission(): Promise<boolean> {
  if (Platform.OS !== 'android') {
    return true
  }

  try {
    const granted = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.CAMERA,
      {
        title: '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É',
        message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤',
        buttonNeutral: '–ü–æ–∑–∂–µ',
        buttonNegative: '–û—Ç–º–µ–Ω–∞',
        buttonPositive: 'OK',
      }
    )
    return granted === PermissionsAndroid.RESULTS.GRANTED
  } catch (err) {
    console.warn('Camera permission error:', err)
    return false
  }
}

/**
 * –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export async function pickMedicinePhoto(): Promise<string | null> {
  return new Promise(resolve => {
    Alert.alert(
      '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ',
      '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      [
        {
          text: '–ö–∞–º–µ—Ä–∞',
          onPress: async () => {
            const hasPermission = await requestCameraPermission()
            if (!hasPermission) {
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã')
              resolve(null)
              return
            }
            const result = await takePhoto()
            resolve(result)
          }
        },
        {
          text: '–ì–∞–ª–µ—Ä–µ—è',
          onPress: async () => {
            const result = await pickFromGallery()
            resolve(result)
          }
        },
        {
          text: '–û—Ç–º–µ–Ω–∞',
          style: 'cancel',
          onPress: () => resolve(null)
        }
      ]
    )
  })
}

/**
 * –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã
 */
async function takePhoto(): Promise<string | null> {
  try {
    const result = await launchCamera({
      mediaType: 'photo',
      cameraType: 'back',
      quality: 0.7,
      maxWidth: 1024,
      maxHeight: 1024,
    })

    return await processImageResult(result)
  } catch (error) {
    console.error('Take photo error:', error)
    return null
  }
}

/**
 * –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
 */
async function pickFromGallery(): Promise<string | null> {
  try {
    const result = await launchImageLibrary({
      mediaType: 'photo',
      quality: 0.7,
      maxWidth: 1024,
      maxHeight: 1024,
    })

    return await processImageResult(result)
  } catch (error) {
    console.error('Pick from gallery error:', error)
    return null
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function processImageResult(result: ImagePickerResponse): Promise<string | null> {
  if (result.didCancel) {
    return null
  }

  if (result.errorCode) {
    console.error('Image picker error:', result.errorCode, result.errorMessage)
    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    return null
  }

  const asset = result.assets?.[0]
  if (!asset?.uri) {
    return null
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –Ω–∞—à—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  return await savePhotoToLocalStorage(asset)
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 */
async function savePhotoToLocalStorage(asset: Asset): Promise<string | null> {
  try {
    await initPhotosDirectory()

    const fileName = `medicine_${Date.now()}.jpg`
    const destPath = `${PHOTOS_DIR}/${fileName}`

    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
    await RNFS.copyFile(asset.uri!, destPath)

    console.log('üì∏ Photo saved:', destPath)
    return destPath
  } catch (error) {
    console.error('Failed to save photo:', error)
    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ')
    return null
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
 */
export async function deleteMedicinePhoto(photoPath: string): Promise<void> {
  try {
    const exists = await RNFS.exists(photoPath)
    if (exists) {
      await RNFS.unlink(photoPath)
      console.log('üóëÔ∏è Photo deleted:', photoPath)
    }
  } catch (error) {
    console.error('Failed to delete photo:', error)
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å URI —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function getMedicinePhotoUri(photoPath?: string): string | null {
  if (!photoPath) {
    return null
  }

  // –î–ª—è Android –Ω—É–∂–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å file://
  if (Platform.OS === 'android' && !photoPath.startsWith('file://')) {
    return `file://${photoPath}`
  }

  return photoPath
}

