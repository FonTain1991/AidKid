import { Medicine, MedicineStock } from '@/entities/medicine/model/types'
import { notificationService } from './notifications'

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ä–æ–∫–µ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
 * –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∑–∞ 30, 14, 7, 3, 2, 1 –¥–µ–Ω—å –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è (7 –¥–Ω–µ–π)
 * @param {Medicine} medicine –î–∞–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
 * @param {MedicineStock} stock –ó–∞–ø–∞—Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
 * @returns {Promise<string[]>} –ú–∞—Å—Å–∏–≤ ID –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function scheduleMedicineExpiryNotifications(
  medicine: Medicine,
  stock: MedicineStock
): Promise<string[]> {
  if (!stock.expiryDate) {
    return []
  }

  const expiryDate = new Date(stock.expiryDate)
  const notificationIds: string[] = []
  const { kitId } = medicine

  // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
  const schedules = [
    { days: 30, emoji: 'üìÖ', title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—Ä–æ–∫–µ –≥–æ–¥–Ω–æ—Å—Ç–∏', critical: false },
    { days: 14, emoji: '‚è∞', title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—Ä–æ–∫–µ –≥–æ–¥–Ω–æ—Å—Ç–∏', critical: false },
    { days: 7, emoji: '‚ö†Ô∏è', title: '–í–Ω–∏–º–∞–Ω–∏–µ! –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', critical: false },
    { days: 3, emoji: '‚ö†Ô∏è', title: '–í–Ω–∏–º–∞–Ω–∏–µ! –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', critical: false },
    { days: 2, emoji: 'üî¥', title: '–°—Ä–æ—á–Ω–æ! –ò—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', critical: false },
    { days: 1, emoji: 'üî¥', title: '–°—Ä–æ—á–Ω–æ! –ò—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–≤—Ç—Ä–∞', critical: false },
  ]

  // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
  for (const schedule of schedules) {
    const notificationDate = new Date(expiryDate)
    notificationDate.setDate(notificationDate.getDate() - schedule.days)

    const notificationId = `medicine-expiry-${medicine.id}-${stock.id}-${schedule.days}d`
    const daysText = schedule.days === 1 ? '–¥–µ–Ω—å' : schedule.days < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'

    const success = await notificationService.scheduleNotification(notificationId, {
      title: `${schedule.emoji} ${schedule.title}`,
      body: `${medicine.name} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${schedule.days} ${daysText} (${expiryDate.toLocaleDateString('ru-RU')})`,
      notificationDate,
      data: {
        medicineId: medicine.id,
        stockId: stock.id,
        kitId,
        type: 'expiry',
        daysBeforeExpiry: schedule.days,
      },
      kitId,
      critical: schedule.critical,
    })

    if (success) {
      notificationIds.push(notificationId)
    }
  }

  // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π)
  for (let dayAfter = 0; dayAfter <= 7; dayAfter++) {
    const notificationDate = new Date(expiryDate)
    notificationDate.setDate(notificationDate.getDate() + dayAfter)
    notificationDate.setHours(10, 0, 0, 0) // –≤ 10:00 —É—Ç—Ä–∞

    const notificationId = `medicine-expired-${medicine.id}-${stock.id}-${dayAfter}d`
    const title = dayAfter === 0 ? 'üö® –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏—Å—Ç—ë–∫!' : 'üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!'
    const body = dayAfter === 0
      ? `${medicine.name} - —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏—Å—Ç—ë–∫ —Å–µ–≥–æ–¥–Ω—è!`
      : `${medicine.name} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ${dayAfter} ${dayAfter === 1 ? '–¥–µ–Ω—å' : dayAfter < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}. –£—Ç–∏–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!`

    const success = await notificationService.scheduleNotification(notificationId, {
      title,
      body,
      notificationDate,
      data: {
        medicineId: medicine.id,
        stockId: stock.id,
        kitId,
        type: 'expired',
        daysAfterExpiry: dayAfter,
      },
      kitId,
      critical: true, // –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è iOS
    })

    if (success) {
      notificationIds.push(notificationId)
    }
  }

  return notificationIds
}

/**
 * –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
 * @param {string} medicineId ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
 * @param {string} stockId ID –∑–∞–ø–∞—Å–∞
 * @returns {Promise<void>} Promise
 */
export async function cancelMedicineNotifications(
  medicineId: string,
  stockId: string
): Promise<void> {
  // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
  const daysSchedule = [30, 14, 7, 3, 2, 1]
  for (const days of daysSchedule) {
    const notificationId = `medicine-expiry-${medicineId}-${stockId}-${days}d`
    await notificationService.cancelNotification(notificationId)
  }

  // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
  for (let dayAfter = 0; dayAfter <= 7; dayAfter++) {
    const notificationId = `medicine-expired-${medicineId}-${stockId}-${dayAfter}d`
    await notificationService.cancelNotification(notificationId)
  }
}

